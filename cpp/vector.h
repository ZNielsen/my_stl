////////////////////////////////////////////////////////////////////////////////
//  File:   Vector.h
//
//  Â© Zach Nielsen 2020
//  Templated Vector implementation
//
#ifndef _VECTOR_H_
#define _VECTOR_H_

////////////////////////////////////////////////////////////////////////////////
//  INCLUDES
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//  DEFINITIONS
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//  PROTOTYPES
////////////////////////////////////////////////////////////////////////////////

templtate <class T>
class Vector
{
	T *_data;
	size_t _size;
  public:
	//Vector(void)


	void reserve(size_t x) const;
	void resize(size_t x) const;


	inline size_t size(void) const { return _size; }
	inline size_t len(void) const { return _size; }
	inline const T& end(void) const { return _data + (_size-1); }
	inline const T& at(size_t x) { x<_size ? return _data+x : throw 10 }

	// push_back, push
	void push_back(const T);
	constexpr auto push = push_back<T>;

	// pop_front
	// pop_back


	Vector<T> operator<<(const T);
	Vector<T> operator=(const Vector&);
	Vector<T> operator==(const Vector&);

};


////////////////////////////////////////////////////////////////////////////////
//  CODE
////////////////////////////////////////////////////////////////////////////////



#endif // _VECTOR_H_ //
